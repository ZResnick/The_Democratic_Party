{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AdminPage.js\";\nimport React, { Component } from 'react';\nimport { addASong } from '../../store/reducers/songReducer';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify'; //connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\n\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\nexport class AdminPage extends Component {\n  constructor() {\n    super();\n\n    this.handelChange = evt => {\n      this.setState({\n        [evt.target.id]: evt.target.value\n      });\n    };\n\n    this.handelSubmit = evt => {\n      evt.preventDefault();\n      spotifyApi.searchTracks(this.state.title, null, (err, data) => {\n        //could put a utility feature here to filter songs by track and artist but going to simplest option first, taking rhe first song\n        let firstSong = data.tracks.items[0];\n        let songToAdd = {\n          title: firstSong.name,\n          artist: firstSong.artists[0].name,\n          album: firstSong.album.name,\n          length: firstSong.duration_ms,\n          upvotes: 0,\n          songId: firstSong.id,\n          uri: firstSong.uri\n        };\n        this.props.addASong(songToAdd);\n      });\n      this.setState({\n        title: '',\n        artist: '',\n        album: '',\n        length: ''\n      });\n    };\n\n    this.state = {\n      title: '',\n      artist: '',\n      album: '',\n      length: '',\n      token: ''\n    };\n    this.handleChange = this.handelChange.bind(this);\n    this.handleSubmit = this.handelSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    let _token = this.props.tokens && this.props.tokens[0];\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token.token\n      });\n      spotifyApi.setAccessToken(_token.token);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"grey-text text-darken-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Add a Song By Title:\"), React.createElement(\"div\", {\n      className: \"input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Song Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      value: this.state.title,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn pink lighten-1 z-depth-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Add Song\")))), React.createElement(Spotify, {\n      className: \"spotifyPlayer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addASong: song => {\n    dispatch(addASong(song));\n  }\n});\n\nconst mapStateToProps = state => {\n  return {\n    tokens: state.firestore.ordered.spotifyToken\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), firestoreConnect([{\n  collection: 'spotifyToken',\n  orderBy: [['timestamp', 'desc']]\n}]))(AdminPage);","map":{"version":3,"sources":["/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AdminPage.js"],"names":["React","Component","addASong","connect","Spotify","firestoreConnect","compose","SpotifyWebApi","spotifyApi","AdminPage","constructor","handelChange","evt","setState","target","id","value","handelSubmit","preventDefault","searchTracks","state","title","err","data","firstSong","tracks","items","songToAdd","name","artist","artists","album","length","duration_ms","upvotes","songId","uri","props","token","handleChange","bind","handleSubmit","componentDidMount","_token","tokens","setAccessToken","render","mapDispatchToProps","dispatch","song","mapStateToProps","firestore","ordered","spotifyToken","collection","orderBy"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { addASong } from '../../store/reducers/songReducer';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify';\n\n//connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nexport class AdminPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      title: '',\n      artist: '',\n      album: '',\n      length: '',\n      token: '',\n    };\n\n    this.handleChange = this.handelChange.bind(this);\n    this.handleSubmit = this.handelSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    let _token = this.props.tokens && this.props.tokens[0];\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token.token,\n      });\n      spotifyApi.setAccessToken(_token.token);\n    }\n  }\n\n  handelChange = evt => {\n    this.setState({\n      [evt.target.id]: evt.target.value,\n    });\n  };\n\n  handelSubmit = evt => {\n    evt.preventDefault();\n    spotifyApi.searchTracks(this.state.title, null, (err, data) => {\n      //could put a utility feature here to filter songs by track and artist but going to simplest option first, taking rhe first song\n      let firstSong = data.tracks.items[0];\n      let songToAdd = {\n        title: firstSong.name,\n        artist: firstSong.artists[0].name,\n        album: firstSong.album.name,\n        length: firstSong.duration_ms,\n        upvotes: 0,\n        songId: firstSong.id,\n        uri: firstSong.uri,\n      };\n      this.props.addASong(songToAdd);\n    });\n    this.setState({\n      title: '',\n      artist: '',\n      album: '',\n      length: '',\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <form onSubmit={this.handleSubmit} className=\"white\">\n            <h5 className=\"grey-text text-darken-3\">Add a Song By Title:</h5>\n            <div className=\"input-field\">\n              <label htmlFor=\"title\">Song Title</label>\n              <input\n                type=\"text\"\n                id=\"title\"\n                value={this.state.title}\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className=\"input-field\">\n              <button className=\"btn pink lighten-1 z-depth-0\">Add Song</button>\n            </div>\n          </form>\n        </div>\n        <Spotify className=\"spotifyPlayer\" />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addASong: song => {\n    dispatch(addASong(song));\n  },\n});\n\nconst mapStateToProps = state => {\n  return {\n    tokens: state.firestore.ordered.spotifyToken,\n  };\n};\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  firestoreConnect([\n    { collection: 'spotifyToken', orderBy: [['timestamp', 'desc']] },\n  ])\n)(AdminPage);\n"]},"metadata":{},"sourceType":"module"}