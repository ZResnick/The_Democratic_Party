{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AllSongs.js\";\nimport React, { Component } from 'react';\nimport SingleSong from './SingleSong';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify'; //connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\n\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux'; //spotify web api\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\nexport class AllSongs extends Component {\n  constructor() {\n    super();\n    this.state = {\n      item: {\n        album: {\n          images: [{\n            url: ''\n          }]\n        },\n        name: '',\n        artists: [{\n          name: ''\n        }],\n        duration_ms: 0\n      },\n      is_playing: 'paused',\n      progress_ms: 0\n    };\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.tokens) {\n      let token = this.props.tokens[0].token;\n      spotifyApi.setAccessToken(token);\n      let data = this.getCurrentlyPlaying(token);\n      console.log('data', data, 'this.state', this.state);\n    }\n  }\n\n  getCurrentlyPlaying(token) {\n    spotifyApi.getMyCurrentPlayingTrack(null, (err, data) => {\n      console.log('data:', data);\n      return data;\n    });\n  }\n\n  render() {\n    let _this$props = this.props,\n        songs = _this$props.songs,\n        tokens = _this$props.tokens;\n    let pageSongs = songs && [...songs];\n    let token = tokens && tokens[0];\n    let orderedSongs = pageSongs && pageSongs.sort((a, b) => a.upvotes > b.upvotes ? -1 : 1);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"allSongs container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"All Songs\"), React.createElement(\"table\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Artist\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Album\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Run Time\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Votes\")), songs && orderedSongs.map(song => {\n      return React.createElement(SingleSong, Object.assign({\n        key: song.id\n      }, song, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    })))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, token && React.createElement(Spotify, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })));\n  }\n\n} // mapState;\n\nconst mapStateToProps = state => {\n  return {\n    songs: state.firestore.ordered.Songs,\n    tokens: state.firestore.ordered.spotifyToken\n  };\n}; //use compose to connect connect and firestoreConnect together...\n\n\nexport default compose(connect(mapStateToProps, null), firestoreConnect([{\n  collection: 'Songs',\n  orderBy: [['upvotes', 'desc']]\n}, {\n  collection: 'spotifyToken',\n  orderBy: [['timestamp', 'desc']]\n}]))(AllSongs);","map":{"version":3,"sources":["/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AllSongs.js"],"names":["React","Component","SingleSong","connect","Spotify","firestoreConnect","compose","SpotifyWebApi","spotifyApi","AllSongs","constructor","state","item","album","images","url","name","artists","duration_ms","is_playing","progress_ms","getCurrentlyPlaying","bind","componentDidMount","props","tokens","token","setAccessToken","data","console","log","getMyCurrentPlayingTrack","err","render","songs","pageSongs","orderedSongs","sort","a","b","upvotes","map","song","id","mapStateToProps","firestore","ordered","Songs","spotifyToken","collection","orderBy"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SingleSong from './SingleSong';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify';\n\n//connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\n\n//spotify web api\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nexport class AllSongs extends Component {\n  constructor() {\n    super();\n    this.state = {\n      item: {\n        album: {\n          images: [{ url: '' }],\n        },\n        name: '',\n        artists: [{ name: '' }],\n        duration_ms: 0,\n      },\n      is_playing: 'paused',\n      progress_ms: 0,\n    };\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.tokens) {\n      let token = this.props.tokens[0].token;\n      spotifyApi.setAccessToken(token);\n      let data = this.getCurrentlyPlaying(token);\n      console.log('data', data, 'this.state', this.state);\n    }\n  }\n\n  getCurrentlyPlaying(token) {\n    spotifyApi.getMyCurrentPlayingTrack(null, (err, data) => {\n      console.log('data:', data);\n      return data;\n    });\n  }\n\n  render() {\n    let { songs, tokens } = this.props;\n    let pageSongs = songs && [...songs];\n    let token = tokens && tokens[0];\n    let orderedSongs =\n      pageSongs && pageSongs.sort((a, b) => (a.upvotes > b.upvotes ? -1 : 1));\n    return (\n      <div>\n        <div className=\"allSongs container\">\n          <h3 className=\"center\">All Songs</h3>\n          <table className=\"container\">\n            <tbody>\n              <tr>\n                <th>Title</th>\n                <th>Artist</th>\n                <th>Album</th>\n                <th>Run Time</th>\n                <th>Votes</th>\n              </tr>\n              {songs &&\n                orderedSongs.map(song => {\n                  return <SingleSong key={song.id} {...song} />;\n                })}\n            </tbody>\n          </table>\n        </div>\n        <div>{token && <Spotify />}</div>\n      </div>\n    );\n  }\n}\n\n// mapState;\nconst mapStateToProps = state => {\n  return {\n    songs: state.firestore.ordered.Songs,\n    tokens: state.firestore.ordered.spotifyToken,\n  };\n};\n\n//use compose to connect connect and firestoreConnect together...\nexport default compose(\n  connect(\n    mapStateToProps,\n    null\n  ),\n  firestoreConnect([\n    { collection: 'Songs', orderBy: [['upvotes', 'desc']] },\n    { collection: 'spotifyToken', orderBy: [['timestamp', 'desc']] },\n  ])\n)(AllSongs);\n"]},"metadata":{},"sourceType":"module"}