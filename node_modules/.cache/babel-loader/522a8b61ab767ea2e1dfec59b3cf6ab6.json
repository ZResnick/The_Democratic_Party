{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AdminPage.js\";\nimport React, { Component } from 'react';\nimport { addASong } from '../../store/reducers/songReducer';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify'; //connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\n\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\nexport class AdminPage extends Component {\n  constructor() {\n    super();\n\n    this.handelChange = async evt => {\n      this.setState({\n        [evt.target.id]: evt.target.value\n      });\n      await spotifyApi.searchTracks(this.state.title, null, (err, data) => {\n        this.setState({\n          possibleSongs: data\n        });\n      });\n    };\n\n    this.handelSubmit = async evt => {\n      evt.preventDefault();\n      await spotifyApi.searchTracks(this.state.title, null, (err, data) => {\n        //could put a utility feature here to filter songs by track and artist but going to simplest option first, taking rhe first song\n        let firstSong = data && data.tracks.items[0];\n        let songToAdd = {\n          title: firstSong.name,\n          artist: firstSong.artists[0].name,\n          album: firstSong.album.name,\n          length: firstSong.duration_ms,\n          upvotes: 0,\n          songId: firstSong.id,\n          uri: firstSong.uri\n        };\n        this.props.addASong(songToAdd);\n      });\n      this.setState({\n        title: '',\n        artist: '',\n        album: '',\n        length: ''\n      });\n    };\n\n    this.state = {\n      title: '',\n      artist: '',\n      album: '',\n      length: '',\n      token: '',\n      possibleSongs: ''\n    };\n    this.handleChange = this.handelChange.bind(this);\n    this.handleSubmit = this.handelSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    let _token = this.props.token && this.props.token[0];\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token.token\n      });\n      spotifyApi.setAccessToken(_token.token);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"grey-text text-darken-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Add a Song By Title:\"), React.createElement(\"div\", {\n      className: \"input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Song Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      value: this.state.title,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), this.state.possibleSongs && this.state.possibleSongs.tracks && this.state.possibleSongs.tracks.items && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Possible Songs...\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, this.state.possibleSongs.tracks.items.map(song => {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, song.name, \", \", song.artists[0].name, ' ');\n    }))), React.createElement(\"div\", {\n      className: \"input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn pink lighten-1 z-depth-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Add Song\")))), React.createElement(Spotify, {\n      className: \"spotifyPlayer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addASong: song => {\n    dispatch(addASong(song));\n  }\n});\n\nconst mapStateToProps = state => {\n  return {\n    token: state.firestore.ordered.spotifyToken\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), firestoreConnect([{\n  collection: 'spotifyToken'\n}]))(AdminPage);","map":{"version":3,"sources":["/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AdminPage.js"],"names":["React","Component","addASong","connect","Spotify","firestoreConnect","compose","SpotifyWebApi","spotifyApi","AdminPage","constructor","handelChange","evt","setState","target","id","value","searchTracks","state","title","err","data","possibleSongs","handelSubmit","preventDefault","firstSong","tracks","items","songToAdd","name","artist","artists","album","length","duration_ms","upvotes","songId","uri","props","token","handleChange","bind","handleSubmit","componentDidMount","_token","setAccessToken","render","map","song","mapDispatchToProps","dispatch","mapStateToProps","firestore","ordered","spotifyToken","collection"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { addASong } from '../../store/reducers/songReducer';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify';\n\n//connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nexport class AdminPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      title: '',\n      artist: '',\n      album: '',\n      length: '',\n      token: '',\n      possibleSongs: '',\n    };\n\n    this.handleChange = this.handelChange.bind(this);\n    this.handleSubmit = this.handelSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    let _token = this.props.token && this.props.token[0];\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token.token,\n      });\n      spotifyApi.setAccessToken(_token.token);\n    }\n  }\n\n  handelChange = async evt => {\n    this.setState({\n      [evt.target.id]: evt.target.value,\n    });\n    await spotifyApi.searchTracks(this.state.title, null, (err, data) => {\n      this.setState({\n        possibleSongs: data,\n      });\n    });\n  };\n\n  handelSubmit = async evt => {\n    evt.preventDefault();\n    await spotifyApi.searchTracks(this.state.title, null, (err, data) => {\n      //could put a utility feature here to filter songs by track and artist but going to simplest option first, taking rhe first song\n      let firstSong = data && data.tracks.items[0];\n      let songToAdd = {\n        title: firstSong.name,\n        artist: firstSong.artists[0].name,\n        album: firstSong.album.name,\n        length: firstSong.duration_ms,\n        upvotes: 0,\n        songId: firstSong.id,\n        uri: firstSong.uri,\n      };\n      this.props.addASong(songToAdd);\n    });\n    this.setState({\n      title: '',\n      artist: '',\n      album: '',\n      length: '',\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <form onSubmit={this.handleSubmit} className=\"white\">\n            <h5 className=\"grey-text text-darken-3\">Add a Song By Title:</h5>\n            <div className=\"input-field\">\n              <label htmlFor=\"title\">Song Title</label>\n              <input\n                type=\"text\"\n                id=\"title\"\n                value={this.state.title}\n                onChange={this.handleChange}\n              />\n            </div>\n            {this.state.possibleSongs &&\n              this.state.possibleSongs.tracks &&\n              this.state.possibleSongs.tracks.items && (\n                <div>\n                  <h4>Possible Songs...</h4>\n                  <ul>\n                    {this.state.possibleSongs.tracks.items.map(song => {\n                      return (\n                        <li>\n                          {song.name}, {song.artists[0].name}{' '}\n                        </li>\n                      );\n                    })}\n                  </ul>\n                </div>\n              )}\n            <div className=\"input-field\">\n              <button className=\"btn pink lighten-1 z-depth-0\">Add Song</button>\n            </div>\n          </form>\n        </div>\n        <Spotify className=\"spotifyPlayer\" />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addASong: song => {\n    dispatch(addASong(song));\n  },\n});\n\nconst mapStateToProps = state => {\n  return {\n    token: state.firestore.ordered.spotifyToken,\n  };\n};\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  firestoreConnect([{ collection: 'spotifyToken' }])\n)(AdminPage);\n"]},"metadata":{},"sourceType":"module"}