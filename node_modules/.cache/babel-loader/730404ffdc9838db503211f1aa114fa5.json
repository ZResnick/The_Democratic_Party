{"ast":null,"code":"import _objectSpread from \"/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport history from '../../history';\nconst initialState = [{\n  title: 'Wannabe',\n  artist: 'The Spice Girls',\n  album: 'Spice',\n  length: 3.9\n}, {\n  title: \"I'm Not Willing\",\n  artist: 'Moby Grape',\n  album: 'Longfrom',\n  length: 2.75\n}, {\n  title: 'Easy Love',\n  artist: 'MSTRKRFT',\n  album: 'Electric Feel',\n  length: 3.25\n}]; //this will be an array of objects\n//CONSTANTS:\n\nconst GOT_ALL_SONGS = 'GOT_ALL_SONGS';\nconst ADDED_A_SONG = 'ADDED_A_SONG'; //ACTION CREATORS\n\nconst gotAllSongs = songs => ({\n  type: GOT_ALL_SONGS,\n  songs\n});\n\nconst addedASong = song => ({\n  type: ADDED_A_SONG,\n  song\n}); //THUNKS\n\n\nexport const getAllSongs = () => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  try {//make asyn call > const { data } = await axios.get('/api/products');\n    //dispatch(gotAllSongs(data));\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const addASong = song => async (dispatch, getState, //the firestore functions on line 38 WILL NOT WORK WITHOUT THIS GETSTATE!!!\n{\n  getFirebase,\n  getFirestore\n}) => {\n  try {\n    const firestore = getFirestore(); //this is the call that gets us access to firestore:\n    //gets us a reference to the Songs Collection and then adds a document using .add({document })\n\n    await firestore.collection('Songs').add(_objectSpread({}, song));\n    history.push('/');\n    dispatch(addedASong(song));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst songReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GOT_ALL_SONGS:\n      return state;\n\n    case ADDED_A_SONG:\n      return [...state, action.song];\n\n    default:\n      return state;\n  }\n};\n\nexport default songReducer;","map":{"version":3,"sources":["/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/store/reducers/songReducer.js"],"names":["history","initialState","title","artist","album","length","GOT_ALL_SONGS","ADDED_A_SONG","gotAllSongs","songs","type","addedASong","song","getAllSongs","dispatch","getState","getFirebase","getFirestore","err","console","error","addASong","firestore","collection","add","push","songReducer","state","action"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,eAApB;AAEA,MAAMC,YAAY,GAAG,CACnB;AAAEC,EAAAA,KAAK,EAAE,SAAT;AAAoBC,EAAAA,MAAM,EAAE,iBAA5B;AAA+CC,EAAAA,KAAK,EAAE,OAAtD;AAA+DC,EAAAA,MAAM,EAAE;AAAvE,CADmB,EAEnB;AACEH,EAAAA,KAAK,EAAE,iBADT;AAEEC,EAAAA,MAAM,EAAE,YAFV;AAGEC,EAAAA,KAAK,EAAE,UAHT;AAIEC,EAAAA,MAAM,EAAE;AAJV,CAFmB,EAQnB;AACEH,EAAAA,KAAK,EAAE,WADT;AAEEC,EAAAA,MAAM,EAAE,UAFV;AAGEC,EAAAA,KAAK,EAAE,eAHT;AAIEC,EAAAA,MAAM,EAAE;AAJV,CARmB,CAArB,C,CAcG;AAEH;;AACA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,YAAY,GAAG,cAArB,C,CAEA;;AACA,MAAMC,WAAW,GAAGC,KAAK,KAAK;AAAEC,EAAAA,IAAI,EAAEJ,aAAR;AAAuBG,EAAAA;AAAvB,CAAL,CAAzB;;AACA,MAAME,UAAU,GAAGC,IAAI,KAAK;AAAEF,EAAAA,IAAI,EAAEH,YAAR;AAAsBK,EAAAA;AAAtB,CAAL,CAAvB,C,CAEA;;;AACA,OAAO,MAAMC,WAAW,GAAG,MAAM,OAC/BC,QAD+B,EAE/BC,QAF+B,EAG/B;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAH+B,KAI5B;AACH,MAAI,CACF;AACA;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,CAXM;AAaP,OAAO,MAAMG,QAAQ,GAAGT,IAAI,IAAI,OAC9BE,QAD8B,EAE9BC,QAF8B,EAEpB;AACV;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAH8B,KAI3B;AACH,MAAI;AACF,UAAMK,SAAS,GAAGL,YAAY,EAA9B,CADE,CACgC;AAClC;;AACA,UAAMK,SAAS,CAACC,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,mBAAuCZ,IAAvC,EAAN;AACAZ,IAAAA,OAAO,CAACyB,IAAR,CAAa,GAAb;AACAX,IAAAA,QAAQ,CAACH,UAAU,CAACC,IAAD,CAAX,CAAR;AACD,GAND,CAME,OAAOM,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,CAdM;;AAgBP,MAAMQ,WAAW,GAAG,CAACC,KAAK,GAAG1B,YAAT,EAAuB2B,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAAClB,IAAf;AACE,SAAKJ,aAAL;AACE,aAAOqB,KAAP;;AACF,SAAKpB,YAAL;AACE,aAAO,CAAC,GAAGoB,KAAJ,EAAWC,MAAM,CAAChB,IAAlB,CAAP;;AACF;AACE,aAAOe,KAAP;AANJ;AAQD,CATD;;AAWA,eAAeD,WAAf","sourcesContent":["import history from '../../history';\n\nconst initialState = [\n  { title: 'Wannabe', artist: 'The Spice Girls', album: 'Spice', length: 3.9 },\n  {\n    title: \"I'm Not Willing\",\n    artist: 'Moby Grape',\n    album: 'Longfrom',\n    length: 2.75,\n  },\n  {\n    title: 'Easy Love',\n    artist: 'MSTRKRFT',\n    album: 'Electric Feel',\n    length: 3.25,\n  },\n]; //this will be an array of objects\n\n//CONSTANTS:\nconst GOT_ALL_SONGS = 'GOT_ALL_SONGS';\nconst ADDED_A_SONG = 'ADDED_A_SONG';\n\n//ACTION CREATORS\nconst gotAllSongs = songs => ({ type: GOT_ALL_SONGS, songs });\nconst addedASong = song => ({ type: ADDED_A_SONG, song });\n\n//THUNKS\nexport const getAllSongs = () => async (\n  dispatch,\n  getState,\n  { getFirebase, getFirestore }\n) => {\n  try {\n    //make asyn call > const { data } = await axios.get('/api/products');\n    //dispatch(gotAllSongs(data));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const addASong = song => async (\n  dispatch,\n  getState, //the firestore functions on line 38 WILL NOT WORK WITHOUT THIS GETSTATE!!!\n  { getFirebase, getFirestore }\n) => {\n  try {\n    const firestore = getFirestore(); //this is the call that gets us access to firestore:\n    //gets us a reference to the Songs Collection and then adds a document using .add({document })\n    await firestore.collection('Songs').add({ ...song });\n    history.push('/');\n    dispatch(addedASong(song));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nconst songReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case GOT_ALL_SONGS:\n      return state;\n    case ADDED_A_SONG:\n      return [...state, action.song];\n    default:\n      return state;\n  }\n};\n\nexport default songReducer;\n"]},"metadata":{},"sourceType":"module"}