{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AllSongs.js\";\nimport React, { Component } from 'react';\nimport SingleSong from './SingleSong';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify';\nimport grooverPlaylist from './spotifyConfig'; //connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\n\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux'; //spotify web api\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\nexport class AllSongs extends Component {\n  constructor() {\n    super();\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.tokens & this.props.songs) {\n      let token = this.props.tokens[0].token;\n      let songs = this.props.songs;\n      spotifyApi.setAccessToken(token);\n      this.getCurrentlyPlaying(token, songs);\n    }\n  }\n\n  getCurrentlyPlaying(token, songs) {\n    spotifyApi.getMyCurrentPlayingTrack(null, async (err, data) => {\n      let currentProgress = data.progress_ms;\n      let songLength = data.item.duration_ms;\n      console.log('hello');\n      let timeToEnd = songLength - currentProgress;\n      let orderedSongs = songs.sort((a, b) => a.upvotes > b.upvotes ? -1 : 1);\n      let nextSong = orderedSongs[0];\n      setTimeout((nextSong, grooverPlaylist) => {\n        console.log('HELLO');\n      }, 5000);\n    });\n  }\n\n  render() {\n    let _this$props = this.props,\n        songs = _this$props.songs,\n        tokens = _this$props.tokens;\n    let pageSongs = songs && [...songs];\n    let token = tokens && tokens[0];\n    let orderedSongs = pageSongs && pageSongs.sort((a, b) => a.upvotes > b.upvotes ? -1 : 1);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"allSongs container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"All Songs\"), React.createElement(\"table\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Artist\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Album\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Run Time\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Votes\")), songs && orderedSongs.map(song => {\n      return React.createElement(SingleSong, Object.assign({\n        key: song.id\n      }, song, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    })))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, token && React.createElement(Spotify, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })));\n  }\n\n} // mapState;\n\nconst mapStateToProps = state => {\n  return {\n    songs: state.firestore.ordered.Songs,\n    tokens: state.firestore.ordered.spotifyToken\n  };\n}; //use compose to connect connect and firestoreConnect together...\n\n\nexport default compose(connect(mapStateToProps, null), firestoreConnect([{\n  collection: 'Songs',\n  orderBy: [['upvotes', 'desc']]\n}, {\n  collection: 'spotifyToken',\n  orderBy: [['timestamp', 'desc']]\n}]))(AllSongs);","map":{"version":3,"sources":["/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AllSongs.js"],"names":["React","Component","SingleSong","connect","Spotify","grooverPlaylist","firestoreConnect","compose","SpotifyWebApi","spotifyApi","AllSongs","constructor","getCurrentlyPlaying","bind","componentDidMount","props","tokens","songs","token","setAccessToken","getMyCurrentPlayingTrack","err","data","currentProgress","progress_ms","songLength","item","duration_ms","console","log","timeToEnd","orderedSongs","sort","a","b","upvotes","nextSong","setTimeout","render","pageSongs","map","song","id","mapStateToProps","state","firestore","ordered","Songs","spotifyToken","collection","orderBy"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SingleSong from './SingleSong';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify';\nimport grooverPlaylist from './spotifyConfig';\n\n//connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\n\n//spotify web api\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nexport class AllSongs extends Component {\n  constructor() {\n    super();\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.tokens & this.props.songs) {\n      let token = this.props.tokens[0].token;\n      let songs = this.props.songs;\n      spotifyApi.setAccessToken(token);\n      this.getCurrentlyPlaying(token, songs);\n    }\n  }\n\n  getCurrentlyPlaying(token, songs) {\n    spotifyApi.getMyCurrentPlayingTrack(null, async (err, data) => {\n      let currentProgress = data.progress_ms;\n      let songLength = data.item.duration_ms;\n      console.log('hello');\n      let timeToEnd = songLength - currentProgress;\n      let orderedSongs = songs.sort((a, b) => (a.upvotes > b.upvotes ? -1 : 1));\n      let nextSong = orderedSongs[0];\n      setTimeout((nextSong, grooverPlaylist) => {\n        console.log('HELLO');\n      }, 5000);\n    });\n  }\n\n  render() {\n    let { songs, tokens } = this.props;\n    let pageSongs = songs && [...songs];\n    let token = tokens && tokens[0];\n    let orderedSongs =\n      pageSongs && pageSongs.sort((a, b) => (a.upvotes > b.upvotes ? -1 : 1));\n    return (\n      <div>\n        <div className=\"allSongs container\">\n          <h3 className=\"center\">All Songs</h3>\n          <table className=\"container\">\n            <tbody>\n              <tr>\n                <th>Title</th>\n                <th>Artist</th>\n                <th>Album</th>\n                <th>Run Time</th>\n                <th>Votes</th>\n              </tr>\n              {songs &&\n                orderedSongs.map(song => {\n                  return <SingleSong key={song.id} {...song} />;\n                })}\n            </tbody>\n          </table>\n        </div>\n        <div>{token && <Spotify />}</div>\n      </div>\n    );\n  }\n}\n\n// mapState;\nconst mapStateToProps = state => {\n  return {\n    songs: state.firestore.ordered.Songs,\n    tokens: state.firestore.ordered.spotifyToken,\n  };\n};\n\n//use compose to connect connect and firestoreConnect together...\nexport default compose(\n  connect(\n    mapStateToProps,\n    null\n  ),\n  firestoreConnect([\n    { collection: 'Songs', orderBy: [['upvotes', 'desc']] },\n    { collection: 'spotifyToken', orderBy: [['timestamp', 'desc']] },\n  ])\n)(AllSongs);\n"]},"metadata":{},"sourceType":"module"}