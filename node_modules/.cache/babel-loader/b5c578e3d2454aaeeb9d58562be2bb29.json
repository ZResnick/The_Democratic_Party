{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AllSongs.js\";\nimport React, { Component } from 'react';\nimport SingleSong from './SingleSong';\nimport { connect } from 'react-redux'; //connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\n\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nexport class AllSongs extends Component {\n  render() {\n    const songs = this.props.songs;\n\n    if (!songs) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, \"Currently loading jams...\");\n    } else {\n      const orderedSongs = songs && songs.sort((a, b) => a.upvotes > b.upvotes ? -1 : 1);\n      return React.createElement(\"div\", {\n        className: \"allSongs container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        className: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"All Songs\"), React.createElement(\"table\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Title\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, \"Artist\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Album\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, \"Run Time\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Votes\")), songs && orderedSongs.map(song => {\n        return React.createElement(SingleSong, Object.assign({\n          key: song.id\n        }, song, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }));\n      }))));\n    }\n  }\n\n} // mapDispatch;\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    songs: state.firestore.ordered.Songs\n  };\n}; //use compose to connect connect and firestoreConnect together...\n\n\nexport default compose(connect(mapStateToProps, null), firestoreConnect([{\n  collection: 'Songs'\n}]))(AllSongs);","map":{"version":3,"sources":["/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AllSongs.js"],"names":["React","Component","SingleSong","connect","firestoreConnect","compose","AllSongs","render","songs","props","orderedSongs","sort","a","b","upvotes","map","song","id","mapStateToProps","state","console","log","firestore","ordered","Songs","collection"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CAEA;;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,OAAO,MAAMC,QAAN,SAAuBL,SAAvB,CAAiC;AACtCM,EAAAA,MAAM,GAAG;AAAA,UACCC,KADD,GACW,KAAKC,KADhB,CACCD,KADD;;AAEP,QAAI,CAACA,KAAL,EAAY;AACV,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAP;AACD,KAFD,MAEO;AACL,YAAME,YAAY,GAChBF,KAAK,IAAIA,KAAK,CAACG,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,OAAF,GAAYD,CAAC,CAACC,OAAd,GAAwB,CAAC,CAAzB,GAA6B,CAAnD,CADX;AAEA,aACE;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,EAEE;AAAO,QAAA,SAAS,EAAC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,CADF,EAQGN,KAAK,IACJE,YAAY,CAACK,GAAb,CAAiBC,IAAI,IAAI;AACvB,eAAO,oBAAC,UAAD;AAAY,UAAA,GAAG,EAAEA,IAAI,CAACC;AAAtB,WAA8BD,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAP;AACD,OAFD,CATJ,CADF,CAFF,CADF;AAoBD;AACF;;AA7BqC,C,CAgCxC;;AACA,MAAME,eAAe,GAAGC,KAAK,IAAI;AAC/BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SAAO;AACLX,IAAAA,KAAK,EAAEW,KAAK,CAACG,SAAN,CAAgBC,OAAhB,CAAwBC;AAD1B,GAAP;AAGD,CALD,C,CAOA;;;AACA,eAAenB,OAAO,CACpBF,OAAO,CACLe,eADK,EAEL,IAFK,CADa,EAKpBd,gBAAgB,CAAC,CAAC;AAAEqB,EAAAA,UAAU,EAAE;AAAd,CAAD,CAAD,CALI,CAAP,CAMbnB,QANa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport SingleSong from './SingleSong';\nimport { connect } from 'react-redux';\n\n//connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\n\nexport class AllSongs extends Component {\n  render() {\n    const { songs } = this.props;\n    if (!songs) {\n      return <h2>Currently loading jams...</h2>;\n    } else {\n      const orderedSongs =\n        songs && songs.sort((a, b) => (a.upvotes > b.upvotes ? -1 : 1));\n      return (\n        <div className=\"allSongs container\">\n          <h3 className=\"center\">All Songs</h3>\n          <table className=\"container\">\n            <tbody>\n              <tr>\n                <th>Title</th>\n                <th>Artist</th>\n                <th>Album</th>\n                <th>Run Time</th>\n                <th>Votes</th>\n              </tr>\n              {songs &&\n                orderedSongs.map(song => {\n                  return <SingleSong key={song.id} {...song} />;\n                })}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n  }\n}\n\n// mapDispatch;\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    songs: state.firestore.ordered.Songs,\n  };\n};\n\n//use compose to connect connect and firestoreConnect together...\nexport default compose(\n  connect(\n    mapStateToProps,\n    null\n  ),\n  firestoreConnect([{ collection: 'Songs' }])\n)(AllSongs);\n"]},"metadata":{},"sourceType":"module"}