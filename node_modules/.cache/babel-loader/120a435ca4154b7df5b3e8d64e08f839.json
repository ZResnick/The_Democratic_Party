{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AdminPage.js\";\nimport React, { Component } from 'react';\nimport { addASong } from '../../store/reducers/songReducer';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify'; //connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\n\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\nexport class AdminPage extends Component {\n  constructor() {\n    super();\n\n    this.handelChange = evt => {\n      this.setState({\n        [evt.target.id]: evt.target.value\n      });\n    };\n\n    this.handelSubmit = evt => {\n      evt.preventDefault();\n      spotifyApi.searchTracks(this.state.title, null, (err, data) => {\n        //could put a utility feature here to filter songs by track and artist but going to simplest option first, taking rhe first song\n        console.log(data);\n        let firstSong = data.tracks.item[0];\n        console.log('return from search:', firstSong);\n      }); //this.props.addASong(this.state);\n\n      this.setState({\n        title: '',\n        artist: '',\n        album: '',\n        length: '',\n        upvotes: 0\n      });\n    };\n\n    this.state = {\n      title: '',\n      artist: '',\n      album: '',\n      length: '',\n      upvotes: 0,\n      token: ''\n    };\n    this.handleChange = this.handelChange.bind(this);\n    this.handleSubmit = this.handelSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    let _token = this.props.tokens[0];\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token.token\n      });\n      spotifyApi.setAccessToken(_token.token);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      className: \"white\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, React.createElement(\"h5\", {\n      className: \"grey-text text-darken-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"Add a Song:\"), React.createElement(\"div\", {\n      className: \"input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Song Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      value: this.state.title,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"artist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Artist\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"artist\",\n      value: this.state.artist,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"album\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Album\"), React.createElement(\"input\", {\n      type: \"text\",\n      id: \"album\",\n      value: this.state.album,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"length\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"Runtime\"), React.createElement(\"input\", {\n      type: \"number\",\n      min: \"0\",\n      step: \".01\",\n      id: \"length\",\n      value: this.state.length,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"input-field\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn pink lighten-1 z-depth-0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Add Song\")))), React.createElement(Spotify, {\n      className: \"spotifyPlayer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addASong: song => {\n    dispatch(addASong(song));\n  }\n});\n\nconst mapStateToProps = state => {\n  return {\n    tokens: state.firestore.ordered.spotifyToken\n  };\n};\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), firestoreConnect([{\n  collection: 'spotifyToken',\n  orderBy: [['timestamp', 'desc']]\n}]))(AdminPage);","map":{"version":3,"sources":["/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AdminPage.js"],"names":["React","Component","addASong","connect","Spotify","firestoreConnect","compose","SpotifyWebApi","spotifyApi","AdminPage","constructor","handelChange","evt","setState","target","id","value","handelSubmit","preventDefault","searchTracks","state","title","err","data","console","log","firstSong","tracks","item","artist","album","length","upvotes","token","handleChange","bind","handleSubmit","componentDidMount","_token","props","tokens","setAccessToken","render","mapDispatchToProps","dispatch","song","mapStateToProps","firestore","ordered","spotifyToken","collection","orderBy"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { addASong } from '../../store/reducers/songReducer';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify';\n\n//connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nexport class AdminPage extends Component {\n  constructor() {\n    super();\n    this.state = {\n      title: '',\n      artist: '',\n      album: '',\n      length: '',\n      upvotes: 0,\n      token: '',\n    };\n\n    this.handleChange = this.handelChange.bind(this);\n    this.handleSubmit = this.handelSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    let _token = this.props.tokens[0];\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token.token,\n      });\n      spotifyApi.setAccessToken(_token.token);\n    }\n  }\n\n  handelChange = evt => {\n    this.setState({\n      [evt.target.id]: evt.target.value,\n    });\n  };\n\n  handelSubmit = evt => {\n    evt.preventDefault();\n    spotifyApi.searchTracks(this.state.title, null, (err, data) => {\n      //could put a utility feature here to filter songs by track and artist but going to simplest option first, taking rhe first song\n      console.log(data);\n      let firstSong = data.tracks.item[0];\n      console.log('return from search:', firstSong);\n    });\n    //this.props.addASong(this.state);\n    this.setState({\n      title: '',\n      artist: '',\n      album: '',\n      length: '',\n      upvotes: 0,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"container\">\n          <form onSubmit={this.handleSubmit} className=\"white\">\n            <h5 className=\"grey-text text-darken-3\">Add a Song:</h5>\n            <div className=\"input-field\">\n              <label htmlFor=\"title\">Song Title</label>\n              <input\n                type=\"text\"\n                id=\"title\"\n                value={this.state.title}\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className=\"input-field\">\n              <label htmlFor=\"artist\">Artist</label>\n              <input\n                type=\"text\"\n                id=\"artist\"\n                value={this.state.artist}\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className=\"input-field\">\n              <label htmlFor=\"album\">Album</label>\n              <input\n                type=\"text\"\n                id=\"album\"\n                value={this.state.album}\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className=\"input-field\">\n              <label htmlFor=\"length\">Runtime</label>\n              <input\n                type=\"number\"\n                min=\"0\"\n                step=\".01\"\n                id=\"length\"\n                value={this.state.length}\n                onChange={this.handleChange}\n              />\n            </div>\n            <div className=\"input-field\">\n              <button className=\"btn pink lighten-1 z-depth-0\">Add Song</button>\n            </div>\n          </form>\n        </div>\n        <Spotify className=\"spotifyPlayer\" />\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addASong: song => {\n    dispatch(addASong(song));\n  },\n});\n\nconst mapStateToProps = state => {\n  return {\n    tokens: state.firestore.ordered.spotifyToken,\n  };\n};\n\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  firestoreConnect([\n    { collection: 'spotifyToken', orderBy: [['timestamp', 'desc']] },\n  ])\n)(AdminPage);\n"]},"metadata":{},"sourceType":"module"}