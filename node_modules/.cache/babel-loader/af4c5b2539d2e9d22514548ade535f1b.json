{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/Spotify.js\";\nimport React, { Component } from 'react';\nimport * as $ from 'jquery';\nimport { authEndpoint, clientId, redirectUri, scopes } from './spotifyConfig';\nimport hash from './hash';\nimport Player from './Player';\nimport { addTokenToFirestore } from '../../store/reducers/authReducer';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nclass Spotify extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{\n            url: ''\n          }]\n        },\n        name: '',\n        artists: [{\n          name: ''\n        }],\n        duration_ms: 0\n      },\n      is_playing: 'Paused',\n      progress_ms: 0\n    };\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n  }\n\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token\n      });\n      spotifyApi.setAccessToken(_token);\n      this.getCurrentlyPlaying(_token);\n      this.playThisSong(_token);\n      this.viewDevices(_token);\n      this.props.addTokenToFirestore(_token);\n    }\n  }\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    spotifyApi.getMyCurrentPlayingTrack(null, (err, data) => {\n      this.setState({\n        item: data.item,\n        is_playing: data.is_playing,\n        progress_ms: data.progress_ms\n      });\n      console.log('Song from spotify web api:', data);\n    });\n  }\n\n  playThisSong(token) {\n    // Make a call using the token\n    $.ajax({\n      url: 'https://api.spotify.com/v1/search?q=better%20now&type=track',\n      type: 'GET',\n      beforeSend: xhr => {\n        xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n      },\n      success: data => {//console.log('data.tracks.items.0.uri:', data.tracks.items[0].uri);\n        //let songUri = data.tracks.items[0].uri;\n      }\n    });\n  }\n\n  viewDevices(token) {\n    // Make a call using the token\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me/player/devices',\n      type: 'GET',\n      beforeSend: xhr => {\n        xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n      },\n      success: data => {//console.log('devices', data);\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"header\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, !this.state.token && React.createElement(\"a\", {\n      className: \"btn btn--loginApp-link\",\n      href: \"\".concat(authEndpoint, \"?client_id=\").concat(clientId, \"&redirect_uri=\").concat(redirectUri, \"&scope=\").concat(scopes.join('%20'), \"&response_type=token&show_dialog=true\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Login to Spotify\"), this.state.token && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Player, {\n      item: this.state.item,\n      is_playing: this.state.is_playing,\n      progress_ms: this.progress_ms,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.playThisSong(this.state.token),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Click ME!!!!!\"))));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addTokenToFirestore: song => {\n    dispatch(addTokenToFirestore(song));\n  }\n});\n\nexport default connect(null, mapDispatchToProps)(Spotify);","map":{"version":3,"sources":["/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/Spotify.js"],"names":["React","Component","$","authEndpoint","clientId","redirectUri","scopes","hash","Player","addTokenToFirestore","connect","SpotifyWebApi","spotifyApi","Spotify","constructor","state","token","item","album","images","url","name","artists","duration_ms","is_playing","progress_ms","getCurrentlyPlaying","bind","componentDidMount","_token","access_token","setState","setAccessToken","playThisSong","viewDevices","props","getMyCurrentPlayingTrack","err","data","console","log","ajax","type","beforeSend","xhr","setRequestHeader","success","render","join","mapDispatchToProps","dispatch","song"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport * as $ from 'jquery';\nimport { authEndpoint, clientId, redirectUri, scopes } from './spotifyConfig';\nimport hash from './hash';\nimport Player from './Player';\nimport { addTokenToFirestore } from '../../store/reducers/authReducer';\nimport { connect } from 'react-redux';\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nclass Spotify extends Component {\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n      item: {\n        album: {\n          images: [{ url: '' }],\n        },\n        name: '',\n        artists: [{ name: '' }],\n        duration_ms: 0,\n      },\n      is_playing: 'Paused',\n      progress_ms: 0,\n    };\n    this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n  }\n  componentDidMount() {\n    // Set token\n    let _token = hash.access_token;\n\n    if (_token) {\n      // Set token\n      this.setState({\n        token: _token,\n      });\n      spotifyApi.setAccessToken(_token);\n      this.getCurrentlyPlaying(_token);\n      this.playThisSong(_token);\n      this.viewDevices(_token);\n      this.props.addTokenToFirestore(_token);\n    }\n  }\n\n  getCurrentlyPlaying(token) {\n    // Make a call using the token\n    spotifyApi.getMyCurrentPlayingTrack(null, (err, data) => {\n      this.setState({\n        item: data.item,\n        is_playing: data.is_playing,\n        progress_ms: data.progress_ms,\n      });\n      console.log('Song from spotify web api:', data);\n    });\n  }\n\n  playThisSong(token) {\n    // Make a call using the token\n    $.ajax({\n      url: 'https://api.spotify.com/v1/search?q=better%20now&type=track',\n      type: 'GET',\n      beforeSend: xhr => {\n        xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n      },\n      success: data => {\n        //console.log('data.tracks.items.0.uri:', data.tracks.items[0].uri);\n        //let songUri = data.tracks.items[0].uri;\n      },\n    });\n  }\n\n  viewDevices(token) {\n    // Make a call using the token\n    $.ajax({\n      url: 'https://api.spotify.com/v1/me/player/devices',\n      type: 'GET',\n      beforeSend: xhr => {\n        xhr.setRequestHeader('Authorization', 'Bearer ' + token);\n      },\n      success: data => {\n        //console.log('devices', data);\n      },\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header>\n          {!this.state.token && (\n            <a\n              className=\"btn btn--loginApp-link\"\n              href={`${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\n                '%20'\n              )}&response_type=token&show_dialog=true`}\n            >\n              Login to Spotify\n            </a>\n          )}\n          {this.state.token && (\n            <div>\n              <Player\n                item={this.state.item}\n                is_playing={this.state.is_playing}\n                progress_ms={this.progress_ms}\n              />\n              <button onClick={() => this.playThisSong(this.state.token)}>\n                Click ME!!!!!\n              </button>\n            </div>\n          )}\n        </header>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  addTokenToFirestore: song => {\n    dispatch(addTokenToFirestore(song));\n  },\n});\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Spotify);\n"]},"metadata":{},"sourceType":"module"}