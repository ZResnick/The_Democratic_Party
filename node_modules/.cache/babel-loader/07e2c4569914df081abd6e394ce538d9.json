{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AllSongs.js\";\nimport React, { Component } from 'react';\nimport SingleSong from './SingleSong';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify';\nimport grooverPlaylist from './spotifyConfig';\nimport removeSong from '../../store/reducers/songReducer'; //connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\n\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux'; //spotify web api\n\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\nexport class AllSongs extends Component {\n  constructor() {\n    super();\n    this.getCurrentlyPlaying.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (this.props.tokens) {\n      let token = this.props.tokens[0].token;\n      console.log('hello');\n      spotifyApi.setAccessToken(token);\n      this.getCurrentlyPlaying(token);\n    }\n  }\n\n  getCurrentlyPlaying(token) {\n    spotifyApi.getMyCurrentPlayingTrack(null, (err, data) => {\n      let currentSong = data.item.name;\n      let currentProgress = data.progress_ms;\n      let songLength = data.item.duration_ms;\n      let timeToEnd = songLength - currentProgress - 2000;\n      setTimeout(async () => {\n        let songs = this.props.songs;\n        let pageSongs = songs && [...songs];\n        let orderedSongs = pageSongs && pageSongs.sort((a, b) => a.upvotes > b.upvotes ? -1 : 1);\n        let topSong = orderedSongs[0];\n        console.log(\"ADDING \".concat(topSong.title, \" by \").concat(topSong.artist, \" TO THE GROOVER PLAYLIST\"));\n        await spotifyApi.getPlaylist(grooverPlaylist, null, async (err, data) => {\n          const snapshot = data && data.snapshot_id;\n          let songs = data && data.tracks.items;\n          let currentPosition = songs.findIndex(song => song.track.name === currentSong);\n          let indicesToDestroy = [];\n\n          for (let i = currentPosition + 1; i < songs.length; i++) {\n            indicesToDestroy.push(i);\n          }\n\n          await spotifyApi.removeTracksFromPlaylistInPositions(grooverPlaylist, indicesToDestroy, snapshot, (err, success) => {\n            if (err) {\n              console.log('err', err);\n            }\n          });\n          await spotifyApi.addTracksToPlaylist(grooverPlaylist, [topSong.uri], {\n            position: currentPosition + 1\n          }, (err, data) => {\n            if (err) {\n              console.log('err', err);\n            }\n          });\n        });\n      }, timeToEnd);\n    });\n  }\n\n  render() {\n    let _this$props = this.props,\n        songs = _this$props.songs,\n        tokens = _this$props.tokens;\n    let pageSongs = songs && [...songs];\n    let token = tokens && tokens[0];\n    let orderedSongs = pageSongs && pageSongs.sort((a, b) => a.upvotes > b.upvotes ? -1 : 1);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"allSongs container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"All Songs\"), React.createElement(\"table\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Remove\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Artist\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Album\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Run Time\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Votes\")), songs && orderedSongs.map(song => {\n      return React.createElement(SingleSong, Object.assign({\n        key: song.id\n      }, song, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }));\n    })))), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, token && React.createElement(Spotify, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })));\n  }\n\n} // mapState;\n\nconst mapStateToProps = state => {\n  return {\n    songs: state.firestore.ordered.Songs,\n    tokens: state.firestore.ordered.spotifyToken\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  removeSong: id => {\n    dispatch(removeSong(id));\n  }\n}); //use compose to connect connect and firestoreConnect together...\n\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), firestoreConnect([{\n  collection: 'Songs',\n  orderBy: [['upvotes', 'desc']]\n}, {\n  collection: 'spotifyToken'\n}]))(AllSongs);","map":{"version":3,"sources":["/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AllSongs.js"],"names":["React","Component","SingleSong","connect","Spotify","grooverPlaylist","removeSong","firestoreConnect","compose","SpotifyWebApi","spotifyApi","AllSongs","constructor","getCurrentlyPlaying","bind","componentDidUpdate","props","tokens","token","console","log","setAccessToken","getMyCurrentPlayingTrack","err","data","currentSong","item","name","currentProgress","progress_ms","songLength","duration_ms","timeToEnd","setTimeout","songs","pageSongs","orderedSongs","sort","a","b","upvotes","topSong","title","artist","getPlaylist","snapshot","snapshot_id","tracks","items","currentPosition","findIndex","song","track","indicesToDestroy","i","length","push","removeTracksFromPlaylistInPositions","success","addTracksToPlaylist","uri","position","render","map","id","mapStateToProps","state","firestore","ordered","Songs","spotifyToken","mapDispatchToProps","dispatch","collection","orderBy"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport SingleSong from './SingleSong';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify';\nimport grooverPlaylist from './spotifyConfig';\nimport removeSong from '../../store/reducers/songReducer';\n\n//connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\n\n//spotify web api\nimport SpotifyWebApi from 'spotify-web-api-js';\nvar spotifyApi = new SpotifyWebApi();\n\nexport class AllSongs extends Component {\n  constructor() {\n    super();\n    this.getCurrentlyPlaying.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (this.props.tokens) {\n      let token = this.props.tokens[0].token;\n      console.log('hello');\n      spotifyApi.setAccessToken(token);\n      this.getCurrentlyPlaying(token);\n    }\n  }\n\n  getCurrentlyPlaying(token) {\n    spotifyApi.getMyCurrentPlayingTrack(null, (err, data) => {\n      let currentSong = data.item.name;\n      let currentProgress = data.progress_ms;\n      let songLength = data.item.duration_ms;\n      let timeToEnd = songLength - currentProgress - 2000;\n      setTimeout(async () => {\n        let songs = this.props.songs;\n        let pageSongs = songs && [...songs];\n        let orderedSongs =\n          pageSongs &&\n          pageSongs.sort((a, b) => (a.upvotes > b.upvotes ? -1 : 1));\n        let topSong = orderedSongs[0];\n        console.log(\n          `ADDING ${topSong.title} by ${topSong.artist} TO THE GROOVER PLAYLIST`\n        );\n        await spotifyApi.getPlaylist(\n          grooverPlaylist,\n          null,\n          async (err, data) => {\n            const snapshot = data && data.snapshot_id;\n            let songs = data && data.tracks.items;\n            let currentPosition = songs.findIndex(\n              song => song.track.name === currentSong\n            );\n            let indicesToDestroy = [];\n            for (let i = currentPosition + 1; i < songs.length; i++) {\n              indicesToDestroy.push(i);\n            }\n            await spotifyApi.removeTracksFromPlaylistInPositions(\n              grooverPlaylist,\n              indicesToDestroy,\n              snapshot,\n              (err, success) => {\n                if (err) {\n                  console.log('err', err);\n                }\n              }\n            );\n            await spotifyApi.addTracksToPlaylist(\n              grooverPlaylist,\n              [topSong.uri],\n              { position: currentPosition + 1 },\n              (err, data) => {\n                if (err) {\n                  console.log('err', err);\n                }\n              }\n            );\n          }\n        );\n      }, timeToEnd);\n    });\n  }\n\n  render() {\n    let { songs, tokens } = this.props;\n    let pageSongs = songs && [...songs];\n    let token = tokens && tokens[0];\n    let orderedSongs =\n      pageSongs && pageSongs.sort((a, b) => (a.upvotes > b.upvotes ? -1 : 1));\n    return (\n      <div>\n        <div className=\"allSongs container\">\n          <h3 className=\"center\">All Songs</h3>\n          <table className=\"container\">\n            <tbody>\n              <tr>\n                <th>Remove</th>\n                <th>Title</th>\n                <th>Artist</th>\n                <th>Album</th>\n                <th>Run Time</th>\n                <th>Votes</th>\n              </tr>\n              {songs &&\n                orderedSongs.map(song => {\n                  return <SingleSong key={song.id} {...song} />;\n                })}\n            </tbody>\n          </table>\n        </div>\n        <div>{token && <Spotify />}</div>\n      </div>\n    );\n  }\n}\n\n// mapState;\nconst mapStateToProps = state => {\n  return {\n    songs: state.firestore.ordered.Songs,\n    tokens: state.firestore.ordered.spotifyToken,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  removeSong: id => {\n    dispatch(removeSong(id));\n  },\n});\n\n//use compose to connect connect and firestoreConnect together...\nexport default compose(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  ),\n  firestoreConnect([\n    { collection: 'Songs', orderBy: [['upvotes', 'desc']] },\n    { collection: 'spotifyToken' },\n  ])\n)(AllSongs);\n"]},"metadata":{},"sourceType":"module"}