{"ast":null,"code":"var _jsxFileName = \"/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AllSongs.js\";\nimport React, { Component } from 'react';\nimport SingleSong from './SingleSong';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify'; //connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\n\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nexport class AllSongs extends Component {\n  render() {\n    let songs = this.props.songs;\n    console.log(this.props);\n    let pageSongs = songs && [...songs];\n    let orderedSongs = pageSongs && pageSongs.sort((a, b) => a.upvotes > b.upvotes ? -1 : 1);\n    return React.createElement(\"div\", {\n      className: \"allSongs container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"All Songs\"), React.createElement(\"table\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, \"Title\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"Artist\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, \"Album\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Run Time\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Votes\")), songs && orderedSongs.map(song => {\n      return React.createElement(SingleSong, Object.assign({\n        key: song.id\n      }, song, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }));\n    }))), React.createElement(Spotify, {\n      className: \"spotifyPlayer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }));\n  }\n\n} // mapDispatch;\n\nconst mapStateToProps = state => {\n  return {\n    songs: state.firestore.ordered.Songs,\n    token: state.firestore.spotifyToken\n  };\n}; //use compose to connect connect and firestoreConnect together...\n\n\nexport default compose(connect(mapStateToProps, null), firestoreConnect([{\n  collection: 'Songs',\n  orderBy: [['upvotes', 'desc']]\n}, {\n  collection: 'spotifyToken',\n  orderBy: [['timestamp', 'desc']]\n}]))(AllSongs);","map":{"version":3,"sources":["/Users/zacharyresnick/Desktop/The_Democratic_Party/the_democratic_party/src/components/mainPages/AllSongs.js"],"names":["React","Component","SingleSong","connect","Spotify","firestoreConnect","compose","AllSongs","render","songs","props","console","log","pageSongs","orderedSongs","sort","a","b","upvotes","map","song","id","mapStateToProps","state","firestore","ordered","Songs","token","spotifyToken","collection","orderBy"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,OAAO,MAAMC,QAAN,SAAuBN,SAAvB,CAAiC;AACtCO,EAAAA,MAAM,GAAG;AAAA,QACDC,KADC,GACS,KAAKC,KADd,CACDD,KADC;AAEPE,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKF,KAAjB;AACA,QAAIG,SAAS,GAAGJ,KAAK,IAAI,CAAC,GAAGA,KAAJ,CAAzB;AACA,QAAIK,YAAY,GACdD,SAAS,IAAIA,SAAS,CAACE,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,OAAF,GAAYD,CAAC,CAACC,OAAd,GAAwB,CAAC,CAAzB,GAA6B,CAAvD,CADf;AAEA,WACE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAO,MAAA,SAAS,EAAC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,CADF,EAQGT,KAAK,IACJK,YAAY,CAACK,GAAb,CAAiBC,IAAI,IAAI;AACvB,aAAO,oBAAC,UAAD;AAAY,QAAA,GAAG,EAAEA,IAAI,CAACC;AAAtB,SAA8BD,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD,KAFD,CATJ,CADF,CAFF,EAiBE,oBAAC,OAAD;AAAS,MAAA,SAAS,EAAC,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,CADF;AAqBD;;AA5BqC,C,CA+BxC;;AACA,MAAME,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLd,IAAAA,KAAK,EAAEc,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,KAD1B;AAELC,IAAAA,KAAK,EAAEJ,KAAK,CAACC,SAAN,CAAgBI;AAFlB,GAAP;AAID,CALD,C,CAOA;;;AACA,eAAetB,OAAO,CACpBH,OAAO,CACLmB,eADK,EAEL,IAFK,CADa,EAKpBjB,gBAAgB,CAAC,CACf;AAAEwB,EAAAA,UAAU,EAAE,OAAd;AAAuBC,EAAAA,OAAO,EAAE,CAAC,CAAC,SAAD,EAAY,MAAZ,CAAD;AAAhC,CADe,EAEf;AAAED,EAAAA,UAAU,EAAE,cAAd;AAA8BC,EAAAA,OAAO,EAAE,CAAC,CAAC,WAAD,EAAc,MAAd,CAAD;AAAvC,CAFe,CAAD,CALI,CAAP,CASbvB,QATa,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport SingleSong from './SingleSong';\nimport { connect } from 'react-redux';\nimport Spotify from './Spotify';\n\n//connect certain compomnents with the firestore using the firestoreConnect and compose at the bottom of this file:\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\n\nexport class AllSongs extends Component {\n  render() {\n    let { songs } = this.props;\n    console.log(this.props);\n    let pageSongs = songs && [...songs];\n    let orderedSongs =\n      pageSongs && pageSongs.sort((a, b) => (a.upvotes > b.upvotes ? -1 : 1));\n    return (\n      <div className=\"allSongs container\">\n        <h3 className=\"center\">All Songs</h3>\n        <table className=\"container\">\n          <tbody>\n            <tr>\n              <th>Title</th>\n              <th>Artist</th>\n              <th>Album</th>\n              <th>Run Time</th>\n              <th>Votes</th>\n            </tr>\n            {songs &&\n              orderedSongs.map(song => {\n                return <SingleSong key={song.id} {...song} />;\n              })}\n          </tbody>\n        </table>\n        <Spotify className=\"spotifyPlayer\" />\n      </div>\n    );\n  }\n}\n\n// mapDispatch;\nconst mapStateToProps = state => {\n  return {\n    songs: state.firestore.ordered.Songs,\n    token: state.firestore.spotifyToken,\n  };\n};\n\n//use compose to connect connect and firestoreConnect together...\nexport default compose(\n  connect(\n    mapStateToProps,\n    null\n  ),\n  firestoreConnect([\n    { collection: 'Songs', orderBy: [['upvotes', 'desc']] },\n    { collection: 'spotifyToken', orderBy: [['timestamp', 'desc']] },\n  ])\n)(AllSongs);\n"]},"metadata":{},"sourceType":"module"}