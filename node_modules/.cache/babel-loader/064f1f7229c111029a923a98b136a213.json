{"ast":null,"code":"import _objectSpread from \"/Users/zacharyresnick/Desktop/groover/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport history from '../../history'; //THUNKS\n\nexport const addASong = song => async (dispatch, getState, //the firestore functions on line 38 WILL NOT WORK WITHOUT THIS GETSTATE!!!\n{\n  getFirebase,\n  getFirestore\n}) => {\n  try {\n    const firestore = getFirestore(); //this is the call that gets us access to firestore:\n    //gets us a reference to the Songs Collection and then adds a document using .add({document })\n\n    await firestore.collection('Songs').add(_objectSpread({}, song));\n    history.push('/');\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const removeSong = id => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  try {\n    const firestore = getFirestore();\n    await firestore.collection('Songs').doc(id).delete();\n    history.push('/');\n  } catch (err) {\n    console.error(err);\n  }\n}; //this route will need to find the song by the song id and increment the upvotes\n\nexport const upvote = (id, votes) => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  try {\n    const firestore = getFirestore();\n    const songToUpdate = await firestore.collection('Songs').doc(id);\n    await songToUpdate.update({\n      upvotes: votes + 1\n    });\n    history.push('/');\n  } catch (err) {\n    console.error(err);\n  }\n}; //this route will need to find the song by the song id and decrement the upvotes\n\nexport const downvote = (id, votes) => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  try {\n    const firestore = getFirestore();\n    const songToUpdate = await firestore.collection('Songs').doc(id);\n    await songToUpdate.update({\n      upvotes: votes - 1\n    });\n    history.push('/');\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport default addASong;","map":{"version":3,"sources":["/Users/zacharyresnick/Desktop/groover/src/store/reducers/songReducer.js"],"names":["history","addASong","song","dispatch","getState","getFirebase","getFirestore","firestore","collection","add","push","err","console","error","removeSong","id","doc","delete","upvote","votes","songToUpdate","update","upvotes","downvote"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,eAApB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAGC,IAAI,IAAI,OAC9BC,QAD8B,EAE9BC,QAF8B,EAEpB;AACV;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAH8B,KAI3B;AACH,MAAI;AACF,UAAMC,SAAS,GAAGD,YAAY,EAA9B,CADE,CACgC;AAClC;;AACA,UAAMC,SAAS,CAACC,UAAV,CAAqB,OAArB,EAA8BC,GAA9B,mBAAuCP,IAAvC,EAAN;AACAF,IAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AACD,GALD,CAKE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,CAbM;AAeP,OAAO,MAAMG,UAAU,GAAGC,EAAE,IAAI,OAC9BZ,QAD8B,EAE9BC,QAF8B,EAG9B;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAH8B,KAI3B;AACH,MAAI;AACF,UAAMC,SAAS,GAAGD,YAAY,EAA9B;AACA,UAAMC,SAAS,CACZC,UADG,CACQ,OADR,EAEHQ,GAFG,CAECD,EAFD,EAGHE,MAHG,EAAN;AAIAjB,IAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AACD,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,CAfM,C,CAiBP;;AACA,OAAO,MAAMO,MAAM,GAAG,CAACH,EAAD,EAAKI,KAAL,KAAe,OACnChB,QADmC,EAEnCC,QAFmC,EAGnC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAHmC,KAIhC;AACH,MAAI;AACF,UAAMC,SAAS,GAAGD,YAAY,EAA9B;AACA,UAAMc,YAAY,GAAG,MAAMb,SAAS,CAACC,UAAV,CAAqB,OAArB,EAA8BQ,GAA9B,CAAkCD,EAAlC,CAA3B;AACA,UAAMK,YAAY,CAACC,MAAb,CAAoB;AACxBC,MAAAA,OAAO,EAAEH,KAAK,GAAG;AADO,KAApB,CAAN;AAGAnB,IAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AACD,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,CAfM,C,CAiBP;;AACA,OAAO,MAAMY,QAAQ,GAAG,CAACR,EAAD,EAAKI,KAAL,KAAe,OACrChB,QADqC,EAErCC,QAFqC,EAGrC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAHqC,KAIlC;AACH,MAAI;AACF,UAAMC,SAAS,GAAGD,YAAY,EAA9B;AACA,UAAMc,YAAY,GAAG,MAAMb,SAAS,CAACC,UAAV,CAAqB,OAArB,EAA8BQ,GAA9B,CAAkCD,EAAlC,CAA3B;AACA,UAAMK,YAAY,CAACC,MAAb,CAAoB;AACxBC,MAAAA,OAAO,EAAEH,KAAK,GAAG;AADO,KAApB,CAAN;AAGAnB,IAAAA,OAAO,CAACU,IAAR,CAAa,GAAb;AACD,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD;AACF,CAfM;AAiBP,eAAeV,QAAf","sourcesContent":["import history from '../../history';\n\n//THUNKS\nexport const addASong = song => async (\n  dispatch,\n  getState, //the firestore functions on line 38 WILL NOT WORK WITHOUT THIS GETSTATE!!!\n  { getFirebase, getFirestore }\n) => {\n  try {\n    const firestore = getFirestore(); //this is the call that gets us access to firestore:\n    //gets us a reference to the Songs Collection and then adds a document using .add({document })\n    await firestore.collection('Songs').add({ ...song });\n    history.push('/');\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const removeSong = id => async (\n  dispatch,\n  getState,\n  { getFirebase, getFirestore }\n) => {\n  try {\n    const firestore = getFirestore();\n    await firestore\n      .collection('Songs')\n      .doc(id)\n      .delete();\n    history.push('/');\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n//this route will need to find the song by the song id and increment the upvotes\nexport const upvote = (id, votes) => async (\n  dispatch,\n  getState,\n  { getFirebase, getFirestore }\n) => {\n  try {\n    const firestore = getFirestore();\n    const songToUpdate = await firestore.collection('Songs').doc(id);\n    await songToUpdate.update({\n      upvotes: votes + 1,\n    });\n    history.push('/');\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n//this route will need to find the song by the song id and decrement the upvotes\nexport const downvote = (id, votes) => async (\n  dispatch,\n  getState,\n  { getFirebase, getFirestore }\n) => {\n  try {\n    const firestore = getFirestore();\n    const songToUpdate = await firestore.collection('Songs').doc(id);\n    await songToUpdate.update({\n      upvotes: votes - 1,\n    });\n    history.push('/');\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport default addASong;\n"]},"metadata":{},"sourceType":"module"}